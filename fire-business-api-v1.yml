openapi: '3.0.2'
info:
  title: Fire Financial Services Business API
  description: >
    The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.


    The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.



    The API exposes 3 main areas of functionality: financial functions, service information and service configuration.

    ## Financial Functions

    These functions provide access to your account details, transactions, payee accounts, payment initiation etc.

    ## Service Functions

    These provide information about the fees and limits applied to your account.

    ## Service configuration

    These provide information about your service configs - applications, webhooks, API tokens, etc.
  version: '1.0'
servers:
  - url: https://api-preprod.fire.com/business/v1
    description: Preproduction/Sandbox Server
  - url: https://api.fire.com/business/v1
    description: Production Server
paths:
  /apps/accesstokens:
    post:
      summary: Authenticate with the API.
      description: TODO - Authenticate with the API.
      tags:
        - Authentication
      operationId: authenticate
      security: []
      requestBody:
        required: true
        description: Authentication data
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationData'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
  /accounts:
    get:
      summary: List all fire.com Accounts
      description: Returns all your fire.com Accounts. Ordered by Alias ascending. Can be paginated.
      tags:
          - fire.com Accounts
      operationId: getAccounts
      responses:
        '200':
          description: An array of account objects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accounts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/UnauthorisedError'
    post:
      summary: Add a new account
      description: >
        Creates a new fire.com account.


        **Please note there is a charge associated with creating a new account.**
      tags:
          - fire.com Accounts
      operationId: addAccount
      requestBody:
        required: true
        description: Details of the new account
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewAccount'
      responses:
        '201':
          description: The details of the new account
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Account'
  /accounts/{ican}:
    get:
      summary: Retrieve the details of a fire.com Account
      description: You can retrieve the details of a fire.com Account by its `ican`.
      tags:
          - fire.com Accounts
      operationId: getAccountById
      parameters:
          - in: path
            name: ican
            schema:
              type: integer
              format: int64
              description: The ican of the account to retrieve
            required: true
      responses:
        '200':
          description: An array of account objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/UnauthorisedError'
  /accounts/{ican}/transactions:
    get:
      summary: List transactions for an account
      description: Retrieve a list of transactions against an account.
      tags:
        - Transactions
      operationId: getTransactionsById
      parameters:
            - in: path
              name: ican
              schema:
                type: integer
                format: int64
                description: The ican of the account to retrieve
              required: true
      responses:
        '200':
          description: An array of transaction objects for the account with a count (`total`).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'                  
                #TODO schema
  /accounts/{ican}/transactions/filter:
    get:
      summary: Filtered list of transactions for an account
      description: >
        Retrieve a filtered list of transactions against an account.

        * `dateRangeFrom` - A millisecond epoch time specifying the date range start date.

        * `dateRangeTo` - A millisecond epoch time specifying the date range end date.

        * `searchKeyword` - Search term to filter by from the reference field (`myRef`).

        * `transactionTypes` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types.
      tags:
        - Transactions
      operationId: getTransactionsFilteredById
      parameters:
            - in: path
              name: ican
              schema:
                type: integer
                format: int64
                description: The ican of the account to retrieve
              required: true
            - in: path
              name: filter
              schema:
                type: string
                format: varchar
                description: Query parameter which can be userd to filer the list
              required: true            
      responses:
        '200':
          description: An array of transaction objects for the account with a count (`total`) filtered by the specified query parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'      
                #TODO schema            
  /paymentrequests:
    post:
      summary: Create a Fire Open Payment request
      description: >
        Creates a new Fire Open Payment Payment request. A code is returned that can be shared to your customers as a URL by any channel you wish.

        You will need to enable the `PERM_BUSINESS_POST_PAYMENT_REQUEST` permission to use this endpoint.
      tags:
          - Open Banking
      operationId: newPaymentRequest
      requestBody:
        required: true
        description: Details of the new payment request
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewPaymentRequest'
      responses:
        '200':
          description: Payment Request created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequestResponse'
  /aspsps:
    get:
      summary: Get list of ASPSPs / Banks
      description: >
        Returns all ASPSPs (Account Servicing Payment Service Provider) / banks. The list can be filtered by currency.
        You will need to enable the `PERM_BUSINESS_GET_ASPSPS` permission to use this endpoint.

        ***This endpoint is only required if you intend to host the “Select ASPSP / bank” page yourself.***
      tags:
        - Open Banking
      operationId: getListOfAspsps
      parameters:
          - in: query
            name: currency
            schema:
              type: string
            required: false
            description: The three letter code for the currency - either `EUR` or `GBP`. Use this to filter the list for banks that can be used to pay in a certain currency.
            example: EUR
      responses:
        '200':
          description: >
            A list of ASPSPs the customers can use to pay a payment.
          content:
              application/json:
                schema:
                  type: object
                  properties:
                    total:
                      type: integer
                      example: 10
                      description: The total number of ASPSPs in the list.
                    aspsps:
                      type: array
                      items:
                        $ref: '#/components/schemas/Aspsp'
  /payments/{paymentUuid}/bankpayrefund:
    post:
      summary: Request a Refund for a Payment Request Payment
      description: Process a request to refund a payment. The original payment must be in the `PAID` state.
      tags:
        - Open Banking
      operationId: bankPayRefundRequest
      parameters:
        - in: path
          required: true
          name: paymentUuid
          schema:
            type: string
            description: The unique id for the transaction.
            example: "4ADFB67A-0F5B-4A9A-9D74-34437250045C"
      requestBody:
        required: true
        description: Details of the refund request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankPayRefundRequest'
      responses:
        '200':
          description: Refund Request successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankPayRefundResponse'
        '405':
          description: Error Method not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrors'
  /payments/{paymentUuid}:
    get:
      summary: Get Payment Details
      description: >
        Returns the details of a specific payment.


        As the customer goes through the process of making the payment the status of the payment will change.


        * `AWAITING_AUTHORISATION` -This is the initial status of all your payments.

        * `AUTHORISED` - This is the status that your payment is set to after the customer has authorised the payment with their ASPSP / bank.

        * `AWAITING_MULTI_AUTHORISATION` - Some business accounts such as charities require dual authorisation.

        * `NOT_AUTHORISED` - Either your customer clicked on cancel or the payment was rejected by their ASPSP / bank.

        * `PAID` - Funds were received into your fire.com GBP or EUR account from your customer’s ASPSP / bank.


        You will need to enable the `PERM_BUSINESS_GET_PAYMENT` permission to use this endpoint.
      tags:
        - Open Banking
      operationId: getPaymentDetails
      parameters:
      - in: path
        required: true
        name: paymentUuid
        schema:
          type: string
          description: The unique id for the transaction.
          example: "4ADFB67A-0F5B-4A9A-9D74-34437250045C"
      responses:
        '200':
          description: The Payment Request details object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequestPayment'
  /users:
    get:
      summary: Returns list of all users on your fire.com account
      description: You can retrieve the details of all fire.com users on your acount.
      tags:
        - Users
      operationId: getUsers
      parameters:
      - in: path
        required: true
        name: users
        schema:
          type: string 
          description: Info on users
          example: "14059, colmreid@gmail.com, Colm, Reid, 353830386344, ADMIN, LIVE, 2021-02-23T10:36:59.090Z, FULL, 14059, 18967, EBB10F29-A653-4DBA-9C8C-BA79F72F78B0, LIVE, iPhone - iPhone, IOS, 14.4"
      responses:
          '200':
            description: List of all Users.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
  /user/{userId}:
    get:
      summary: Returns details of a specific fire.com user.
      description: You can retrieve the details of a specific fire.com user
      tags:
        - Users
      operationId: getUser
      parameters:
      - in: path
        required: true
        name: user
        schema:
          type: string 
          description: Lists a specific User
          example: "14059, colmreid@gmail.com, Colm, Reid, 353830386344, ADMIN, LIVE, 2021-02-23T10:36:59.090Z, FULL, 14059, 18967, EBB10F29-A653-4DBA-9C8C-BA79F72F78B0, LIVE, iPhone - iPhone, IOS, 14.4"
      responses:
          '200':
            description: Unique information about a User.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
  /apps:
    post:
      summary: Create a new API Application
      description: Create a new API Application with specified permissions
      tags:
        - API
      operationId: createApiApplication
      requestBody:
        required: true
        description: Details of the new API Application
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewApiApplication'
      responses:
        '200':
          description: API Application created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplication'
  /payees:
    get:
      summary: List all Payee Bank Accounts
      description: >
        Returns all your payee bank accounts. 
        
        
        Ordered by date added descending. 
        
       
        Can be paginated.
      tags:
        - Payee Bank Accounts
      operationId: getPayees
      responses:
        '200':
          description: An array of Payee Bank Accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayeeBankAccount'
  /directdebits:
    get:
      summary: Get all DD payments associated with a direct debit mandate
      description: >
          Retrieve all direct debit payments associated with a direct debit mandate.


          The permision needed to access this endpoint is PERM_BUSINESS_GET_DIRECT_DEBITS


          **HTTP REQUEST**
      tags:
        - Direct Debits
      operationId: getDirectDebitAssociatedWithMandate
      responses:
        '200':
          description: Retrieve all direct debit payments associated with a direct debit mandate.
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/DirectDebitPaymentsAssociatedWithMandate'
  /directdebits/{directDebitUuid}:
    get:
      summary: Get the deails of a direct debit
      description: >
        Retrieve all details of a single direct debit collection/payment, whether successful or not.

        
        The permision needed to access this endpoint is **PERM_BUSINESS_GET_DIRECT_DEBIT**


        **HTTP REQUEST**
      tags:
        - Direct Debits
      operationId: getDirectDebit
      responses:
        '200':
          description: Retrieve all details of a single direct debit collection/payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDebitDetails'
  /directdebits/{directDebitUuid}/reject:
    post:
      summary: Reject a direct debit payment
      description: >
          This endpoint allows you to reject a direct debit payment where the status is still set to RECEIVED.


          Permission name PERM_BUSINESS_POST_DIRECT_DEBIT_REJECT


          **HTTP REQUEST**
      tags:
        - Direct Debits
      operationId: posDirectDebitReject
      responses:
        '204':
          description: 204 no content
  /mandates:
    get:
      summary: List all direct debit mandates
      description: >
        The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATES


        **HTTP REQUEST**
      tags:
        - Direct Debits
      operationId: getAllDirectDebitMandateDetails
      responses:
        '200':
          description: List all direct debit mandates.
          content:
           application/json:
              schema:
                $ref: '#/components/schemas/DirectDebitMandates'
  /mandates/{mandateUuid}:
    get:
      summary: Get direct debit mandate details
      description: >
        Retrieve all details for a direct debit mandate.


        The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATE


        **HTTP REQUEST**
      tags:
        - Direct Debits
      operationId: getDirectDebitMandateDetails
      responses:
        '200':
          description: Retrieve all details for a direct debit mandate.
          content:
           application/json:
              schema:
                $ref: '#/components/schemas/DirectDebitMandateDetails'
    post:
      summary: Update a direct debit mandate alias
      description: >
        Update Direct Debit Mandate Alias


        The permision needed to access this endpoint is PERM_BUSINESS_PUT_MANDATE


        **HTTP REQUEST**
      tags:
        - Direct Debits
      operationId: postDirectDebitUpdateMandate
      responses:
        '204':
          description: 204 no content
  /mandates/{mandateUuid}/cancel:
    post:
      summary: Cancel a direct debit mandate
      description: >
        This endpoint allows you to cancel a direct debit mandate.


        The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_CANCEL


        **HTTP REQUEST**
      tags:
        - Direct Debits
      operationId: postDirectDebitCancelMandate
      responses:
        '204':
          description: 204 no content 
  /mandates/{mandateUuid}/activate:
    post:
      summary: Activate a direct debit mandate
      description: >
        This endpoint can only be used to activate a direct debit mandate when it is in the status REJECT_REQUESTED (even if the account has direct debits disabled). This action will also enable the account for direct debits if it was previously set to be disabled.


        The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_ACTIVATE


        **HTTP REQUEST**
      tags:
        - Direct Debits
      operationId: postDirectDebitActivateMandate
      responses:
        '204':
          description: 204 no content
  /batches:
    post:
      summary: Create a new bath of payments
      description: This is the first step in creating a batch payment.
      tags:
        - Payment Batches
      operationId: createBatchPayment
      requestBody:
        required: true
        description: Details of the batch payment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBatchRequest'
      responses:
        '200':
          description: Batch created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBatchRequestResponce'
    put:
      summary: Submit a batch for approval
      description: >
        Submits the Batch (for approval in the case of a **BANK_TRANSFER**). If this is an **INTERNAL_TRANSFER** batch, the transfers are immediately queued for processing. If this is a **BANK_TRANSFER** batch, this will trigger requests for approval to the firework mobile apps of authorised users. Once those users approve the batch, it is queued for processing.


        You can only submit a batch while it is in the OPEN state.
      tags:
        - Payment Batches
      operationId: submitBatch
      responses:
        '204':
          description: No body is returned - a HTTP 204 No Content response signifies the call was successful.     
    get:
      summary: List batches
      description: >
        Returns the list of batch with the specified types and statuses.



        **HTTP REQUEST**
      tags:
        - Payment Batches
      operationId: getBatches
      parameters:
        - in: query
          name: batchStatus
          schema:
            type: string
            enum:
                - SUBMITTED
                - REMOVED
                - SUCCEEDED
                - FAILED
            description: The status of the batch if internal transfer.
            example: SUBMITTED
        - in: query
          name: batchTypes
          schema:
            type: string
            enum:
             - INTERNAL_TRANSFER
             - BANK_TRANSFER
             - NEW_PAYEE
            description: The type of the batch. Can be one of the 3 listed enums.
            example: "INTERNAL_TRANSFER"
        - in: query
          name: orderBy
          schema:
            type: string
            enum:
             - DATE
            description: You can order the batches by date. No other options at this time
            example: "DATE"            
        - in: query
          name: order
          schema:
            type: string
            enum:
             - DESC
             - ASC
            description: You can order the batches by ascending or descending order.
            example: "DESC"     
        - in: query
          name: offset
          schema:
            type: integer
            format: int64
            description: The page offset. Defaults to 0. This is the record number that the returned list will start at. E.g. offset = 40 and limit = 20 will return records 40 to 59.
            example: "0"  
        - in: query
          name: limit
          schema:
            type: integer
            format: int64
            description: The number of records to return. Defaults to 10 - max is 200.
            example: "10"                     
      responses:
        '200':
          description: List all batches.
          content:
           application/json:
              schema:
                $ref: '#/components/schemas/listBatches'      
  /batches/{batchUuid}/internaltransfers:
    post:
      summary: Add payment for an internal transfers
      description: Simply specify the source account, destination account, amount and a reference.
      tags:
        - Payment Batches
      operationId: addInternalTransferBatchPayment 
      requestBody:
        required: true
        description: Details of the source account, destination account, amount and a reference.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddInternalTransferBatchPayment'
      responses:
        '200':
          description: Batch payment added successfully. Note* Please use batchUuid when submitting a batch, not batchItemUuid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddInternalTransferBatchResponce' 
    get:
      summary: List items in a Batch
      description: Returns a paginated list of items in the specified batch.
      tags:
        - Payment Batches
      operationId: getItemsBatchInternalTrasnfer
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            format: int64
            description: The page offset. Defaults to 0. This is the record number that the returned list will start at. E.g. offset = 40 and limit = 20 will return records 40 to 59.
            example: "0"  
        - in: query
          name: limit
          schema:
            type: integer
            format: int64
            description: The number of records to return. Defaults to 10 - max is 200.
            example: "10"          
      responses:
        '200':
          description: A fire.com list object of Batch Items (Internal transfers or Bank transfers).
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/listItemBatch'
  /batches/{batchUuid}/banktransfers:
    post:
      summary: Add payment for an bank transfers
      description: > 
        There are two ways to process bank transfers - by Payee ID (**Mode 1**) or by Payee Account Details (**Mode 2**).


        **Mode 1:** Use the payee IDs of existing approved payees set up against your account. These batches can be approved in the normal manner.


        **Mode 2:** Use the account details of the payee. In the event that these details correspond to an existing approved payee, the batch can be approved as normal. If the account details are new, a batch of New Payees will automatically be created. This batch will need to be approved before the Payment batch can be approved. These payees will then exist as approved payees for future batches.
      tags:
        - Payment Batches
      operationId: addBankTransferBatchPayment 
      requestBody:
        required: true
        description: Details of **Mode 1** & **Mode 2**. 
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/addBatchMode1'
                - $ref: '#/components/schemas/addBatchMode2EUR'
                - $ref: '#/components/schemas/addBatchMode2GBP'
      responses:
        '200':
          description: Batch payment added successfully. **Note*** Please use batchUuid when submitting a batch, not batchItemUuid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddInternalTransferBatchResponce' 
    get:
      summary: List items in a Batch
      description: Returns a paginated list of items in the specified batch.
      tags:
        - Payment Batches
      operationId: getItemsBatchBankTransfer
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            format: int64
            description: The page offset. Defaults to 0. This is the record number that the returned list will start at. E.g. offset = 40 and limit = 20 will return records 40 to 59.
            example: "0"  
        - in: query
          name: limit
          schema:
            type: integer
            format: int64
            description: The number of records to return. Defaults to 10 - max is 200.
            example: "10"          
      responses:
        '200':
          description: A fire.com list object of Batch Items (Internal transfers or Bank transfers).
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/listItemBatch'
  /batches/{batchUuid}/internaltransfers/{itemUuid}:
    delete:
      summary: Remove a Payment from the Batch (Internal Transfer)
      description: Removes a Payment from the Batch (Internal Transfer). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
      tags:
        - Payment Batches
      operationId: deleteInternalTransferBatchPayment 
      responses:
        '200':
          description: Batch payment deleted successfully. 
  /batches/{batchUuid}/banktransfers/{itemUuid}:
    delete:
      summary: Remove a Payment from the Batch (Bank Transfers)
      description: Removes a Payment from the Batch (Bank Transfers). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
      tags:
        - Payment Batches
      operationId: deleteBankTransferBatchPayment 
      responses:
        '200':
          description: Batch payment deleted successfully.          
  /batches/{batchUuid}:
    delete:
      summary: Cancel a batch
      description: Cancels the Batch. You can only cancel a batch before it is submitted for approval (while it is in the OPEN state).
      tags:
        - Payment Batches
      operationId: cancelBatchPayment 
      responses:
        '200':
          description: Batch payment deleted successfully.      
    get:
      summary: Get details of a single Batch
      description: Returns the details of the batch specified in the API endpoint - {batchUuid}.
      tags:
        - Payment Batches
      operationId: getDetailsSingleBatch
      responses:
        '200':
          description: Returns the details of the batch specified in the API endpoint - {batchUuid}.
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/ListSingleBatch'
  /batches/{batchUuid}/approvals:
     get:
      summary: List Approvers for a Batch
      description: Returns a list of approvers for this batch.
      tags:
        - Payment Batches
      operationId: getListofApproversForBatch
      responses:
        '200':
          description: A list of approvers for this batch.
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/ApproversForBatch'

components:
  schemas:
    AuthenticationData:
      type: object
      properties:
        clientId:
          type: string
          description: The Client ID for this API Application
          example: "4ADFB67A-0F5B-4A9A-9D74-34437250045C"
        refreshToken:
          type: string
          description: The Refresh Token for this API Application
          example: "4ADFB67A-0F5B-4A9A-9D74-34437250045C"
        nonce:
          type: integer
          format: int64
          description: A random non-repeating number used as a salt for the `clientSecret` below. The simplest nonce is a unix time.
          example: 728345638475
        grantType:
          type: string
          enum:
            - AccessToken
          description: Always `AccessToken`. (This will change to `refresh_token` in a future release.)
        clientSecret:
          type: string
          description: The SHA256 hash of the nonce above and the app’s Client Key. The Client Key will only be shown to you when you create the app, so don’t forget to save it somewhere safe.
          example: "4ADFB67A-0F5B-4A9A-9D74-34437250045C"
    AccessToken:
      type: object
      properties:
        businessId:
          type: integer
          format: int64
          description: The business ID for the business.
          example: 248
        apiApplicationId:
          type: integer
          format: int64
          description: The ID of the application you are using.
          example: 433
        expiry:
          type: string
          format: date-time
          description: The expiry date and time for this token (ISO-8601).
          example: "2020-10-22T07:48:56.460Z"
        permissions:
          type: array
          items:
            type: string
          description: The permissions assigned to the Access Token as an array of strings. This provides information on what API access it is allowed. See the section on Scope below.
          example:
            - PERM_BUSINESSES_GET_ACCOUNTS
            - PERM_BUSINESSES_GET_ACCOUNT_TRANSACTIONS
        accessToken:
          type: string
          description: The App Bearer Access Token you can use in further API calls.
          example: "4ADFB67A-0F5B-4A9A-9D74-34437250045C"
    Account:
      type: object
      properties:
        ican:
          type: integer
          format: int64
          description: identifier for the fire.com account (assigned by fire.com)
          example: 42
        name:
          type: string
          description: the name the user gives to the account to help them identify it.
          example: Main Account
        colour:
          type: string
          description: Internal Use
          deprecated: true
          example: ORANGE
        currency:
          type: object
          $ref: '#/components/schemas/Currency'
        balance:
          type: integer
          format: int64
          description: the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).
          example: 23950
        status:
          type: string
          enum:
            - LIVE
            - MIGRATED
          description: Live accounts can be used as normal. Migrated accounts were used before Brexit and are read-only.
        cbic:
          type: string
          example: CPAYIE2D
          description: the BIC of the account (provided if currency is EUR).
        ciban:
          type: string
          example: IE54CPAY99119911111111
          description: the IBAN of the account (provided if currency is EUR).
        cnsc:
          type: string
          example: "232221"
          description: the Sort Code of the account.
        ccan:
          type: string
          example: "11111111"
          description: the Account Number of the account.
        defaultAccount:
          type: boolean
          example: true
          description: true if this is the default account for this currency. This will be the account that general fees are taken from (as opposed to per-transaction fees).
        directDebitsAllowed:
          type: boolean
          example: false
          description: Whether or not direct debits can be set up on this account.
    Currency:
      type: object
      properties:
        code:
          type: string
          description: The three letter code for the currency - either `EUR` or `GBP`.
          enum:
            - EUR
            - GBP
        description:
          type: string
          description: The name of the currency
          example: Euro
    Country:
      type: object
      properties:
        code:
          type: string
          description: The 2-letter code for the country - e.g. `IE`, `GP`...
          example: "GB"
        description:
          type: string
          description: The name of the country
          example: United Kingdom
    NewAccount:
      type: object
      properties:
          accountName:
            type: string
            example: Operating Account
            description: Name to give the new account
            maxLength: 50
          currency:
            type: string
            enum:
              - EUR
              - GBP
            description: The currency of the new account
          acceptFeesAndCharges:
            type: boolean
            description: a field to indicate you accept the fee for a new account
    PaymentRequest:
      type: object
      required:
        - "type"
        - "icanTo"
        - "currency"
        - "myRef"
        - "description"
      properties:
        type:
          type: string
          enum:
            - OTHER
          description: The type of Fire Open Payment that was created
        icanTo:
          type: integer
          format: int64
          example: 42
          description: The ican of the account to collect the funds into. Must be one of your fire.com Accounts.
        amount:
          type: integer
          format: int64
          example: 1000
          description: The requested amount to pay. Note the last two digits represent pennies/cents, (e.g., £1.00 = 100).
        myRef:
          type: string
          example: Fees
          description: An internal description of the request.
        description:
          type: string
          example: Gym Fees Oct 2020
          description: A public facing description of the request. This will be shown to the user when they tap or scan the request.
        maxNumberPayments:
          type: integer
          example: 1
          description: The max number of people who can pay this request. Must be set to 1 for the ECOMMERCE_GOODS and ECOMMERCE_SERVICES types.
        expiry:
          type: string
          format: date-time
          example: "2020-10-22T07:48:56.460Z"
          description: This is the expiry of the payment request. After this time, the payment cannot be paid.
        returnUrl:
          type: string
          example: https://example.com/callback
          description: The merchant return URL where the customer will be re-directed to with the result of the transaction.
        orderDetails:
          type: object
          $ref: '#/components/schemas/OrderDetails'
        collectFields:
          type: string
          example: "ADDRESS|REFERENCE|COMMENT1"
          description: For the hosted option, the payer will be asked to fill in these fields but they will not be mandatory. You can choose to collect any of the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.
        mandatoryFields:
          type: string
          example: "ADDRESS|REFERENCE|COMMENT1"
          description: For the hosted option, these fields will be madatory for the payer to fill in on the hosted payment page. You can choose to collect any the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.
        additionalFields:
          type: string
          example: ORDER_ID|PRODUCT_ID|CUSTOMER_ID|CUSTOMER_NUMBER|COMMENT2
          description: These fields will be dispalyed to the payer when using the hosted option. You can choose to display any of `ORDER_ID`, `PRODUCT_ID`, `CUSTOMER_ID`, `CUSTOMER_NUMBER` and `COMMENT2` to the payer.
    PaymentRequestPayment:
      type: object
      properties:
        type:
          type: string
          enum:
            - OTHER
          description: The type of Fire Open Payment that was created
        paymentRequestCode:
          type: string
          description: The code that was returned when you created the payment request.
          example: "1234abcd"
          maxLength: 8
          minLength: 8
        transactionType:
          type: string
          enum:
            - REFUND_REQUEST
            - PAYMENT
          description: The type of payment request payment
        endToEndId:
          type: string
          example: FIRE1234567890
          description: The unique Open Banking payment ID assigned to this payment.
        paymentUuid:
          type: string
          description: A unique id for the transaction.
          example: "4ADFB67A-0F5B-4A9A-9D74-34437250045C"
        relatedPaymentUuid:
          type: string
          description: The original payment that this payment is linked to
          example: "4ADFB67A-0F5B-4A9A-9D74-34437250045C"
        status:
          type: string
          enum:
            - AWAITING_AUTHORISATION
            - AUTHORISED
            - AWAITING_MULTI_AUTHORISATION
            - NOT_AUTHORISED
            - PAID
            - REJECTED
            - ACCEPTED
            - RECEIVED
          description: The status of the transaction
        reason:
          type: string
          example: Gym Closed for repairs.
          description: The reason for the refund.
        amountBeforeCharges:
          type: integer
          format: int64
          example: 1000
          description: The requested amount (before Fire fees and taxes). Note the last two digits represent pennies/cents, (e.g., £1.00 = 100).
        feeAmount:
          type: integer
          format: int64
          example: 1000
          description: The fee for the payment
        amountAfterCharges:
          type: integer
          format: int64
          example: 1000
          description: The amount after Fire fees and taxes. Note the last two digits represent pennies/cents, (e.g., £1.00 = 100).
        currency:
          type: object
          $ref: '#/components/schemas/Currency'
        myRef:
          type: string
          example: Fees
          description: An internal description of the request.
        description:
          type: string
          example: Gym Fees Oct 2020
          description: A public facing description of the request. This will be shown to the user when they tap or scan the request.
        returnUrl:
          type: string
          example: https://example.com/callback
          description: The merchant return URL where the customer will be re-directed to with the result of the transaction.
        relatedAccountTxnId:
          type: integer
          format: int64
          example: 41234
          description: The ID of the related transaction in your fire account.
        relatedPayeeId:
          type: integer
          format: int64
          example: 41234
          description: The ID of the payee making the payment.
        dateFundsReceived:
          type: string
          format: date-time
          example: "2020-10-22T07:48:56.460Z"
          description: The date the funds were received into your fire account.
        dateCreated:
          type: string
          format: date-time
          example: "2020-10-22T07:48:56.460Z"
          description: This is the date the payment was initiated.
        lastUpdated:
          type: string
          format: date-time
          example: "2019-08-22T07:48:56.460Z"
          description: The date payment was last updated.
        orderDetails:
          type: object
          $ref: '#/components/schemas/OrderDetails'
        to:
          type: object
          $ref: '#/components/schemas/To'
        bank:
          type: object
          $ref: '#/components/schemas/Aspsp'
        domesticPaymentId:
          type: string
          description: The ID assigned by the ASPSP to this payment.
          example: "sdp-1-66ebd30c-c0e1-4a54-9865-f2a7bfedabcf"
        allowFopReceipt:
          type: boolean
          example: true
          description: whether or not a receipt option was offered to the payer.
    To:
      type: object
      properties:
        type:
          type: string
          enum:
            - FIRE_ACCOUNT
            - WITHDRAWAL_ACCOUNT
          example: "FIRE_ACCOUNT"
          description: the type of destination account.
        account:
          type: object
          $ref: '#/components/schemas/RelatedPartyFireAccount'
    RelatedPartyFireAccount:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: identifier for the fire.com account (assigned by fire.com)
          example: 42
        alias:
          type: string
          description: the name the user gives to the account to help them identify it.
          example: Main Account
        bic:
          type: string
          example: CPAYIE2D
          description: the BIC of the account (provided if currency is EUR).
        iban:
          type: string
          example: IE54CPAY99119911111111
          description: the IBAN of the account (provided if currency is EUR).
        nsc:
          type: string
          example: "232221"
          description: the Sort Code of the account.
        accountNumber:
          type: string
          example: "11111111"
          description: the Account Number of the account.
    OrderDetails:
      type: object
      properties:
        merchantNumber:
          type: string
          example: 1234567
          description: Your Merchant Number (if applicable).
        orderId:
          type: string
          example: "6c28a47d-4502-4111"
          description: Use this field to store the order id for the transaction. The Order Id cannot be set unless the `maxNumberPayments` is 1.
        productId:
          type: string
          example: "ZFDAA-1221"
          description: Use this field to store a product id for the transaction (for example).
        customerNumber:
          type: string
          example: "123645"
          description: Use this field to store a customer number for the transaction (for example).
        variableReference:
          type: string
          example: "John Doe"
          description: Use this field to store any other reference for the transaction (for example, a phone number).
        comment1:
          type: string
          example: "Additional comments about the transaction"
          description: This is your own comment for the transaction.
        comment2:
          type: string
          example: "Additional comments about the transaction"
          description: This is your own comment for the transaction.
        merchantCustomerIdentification:
          type: string
          example: "08303863544"
          description: This is a reference you use to uniquely identify each of your customers.
        deliveryAddressLine1:
          type: string
          example: "12 The Street"
          description: The first line of the delivery address.
        deliveryAddressLine2:
          type: string
          example: "The Way"
          description: The second line of the delivery address.
        deliveryCity:
          type: string
          example: "London"
          description: Delivery address city
        deliveryPostCode:
          type: string
          example: "EC15155"
          description: Delivery address post code
        deliveryCountry:
          type: string
          example: "GB"
          description: 2-digit code for the country
    PaymentRequestResponse:
      type: object
      properties:
        code:
          type: string
          example: 1234abcd
          description: >
            The code for this request. Create a URL in this format: `https://payments.fire.com/{code}` and share to your customers.
          minLength: 8
          maxLength: 8
        type:
          type: string
          enum:
            - OTHER
          description: The type of Fire Open Payment that was created.
    NewPaymentRequest:
      allOf:
        - type: object
          properties:
            currency:
              type: string
              enum:
                - EUR
                - GBP
              description: Either `EUR` or `GBP`, and must correspond to the currency of the account the funds are being lodged into in the `icanTo`.
        - $ref: '#/components/schemas/PaymentRequest'
    PaymentRequestDetails:
      allOf:
        - type: object
          properties:
            paymentRequestCode:
              type: string
              description: The code that was returned when you created the payment request.
              example: "1234abcd"
              maxLength: 8
              minLength: 8
            paymentUuid:
              type: string
              description: A unique id for the transaction.
              example: "4ADFB67A-0F5B-4A9A-9D74-34437250045C"
            transactionType:
              type: string
              enum:
                - REFUND_REQUEST
                - PAYMENT
              description: The type of payment request payment
            status:
              type: string
              enum:
                - AWAITING_AUTHORISATION
                - AUTHORISED
                - AWAITING_MULTI_AUTHORISATION
                - NOT_AUTHORISED
                - PAID
                - REJECTED
                - ACCEPTED
                - RECEIVED
              description: The status of the transaction
            currency:
              type: object
              $ref: '#/components/schemas/Currency'
        - $ref: '#/components/schemas/PaymentRequest'
    BankPayRefundRequest:
      type: object
      properties:
        currency:
          type: string
          enum:
            - EUR
            - GBP
          description: Must correspond to the currency of the original payment
        amount:
          type: integer
          format: int64
          example: 1000
          description: The amount to refund. Must be within a certain percentage of the original payment.
        myRef:
          type: string
          example: Fees Refunded
          description: An internal description of the refund request.
        description:
          type: string
          example: Gym Fees Refunded Oct 2020
          description: A public facing description of the refund request.
        orderDetails:
          type: object
          properties:
            merchantNumber:
              type: string
              example: 1234567
              description: Your Merchant Number (if applicable).
        reason:
          type: string
          example: Gym Closed for repairs.
          description: A reason for the refund.
    BankPayRefundResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - REQUEST_ACCEPTED
            - REQUEST_REJECTED
            - REJECTED
            - RECEIVED
          description: Status of the refund request.
        refundRequestUuid:
          type: string
          example: "4ADFB67A-0F5B-4A9A-9D74-34437250045C"
          description: The unique id for the refund request
        paymentUuid:
          type: string
          example: "4ADFB67A-0F5B-4A9A-9D74-34437250045C"
          description: The unique id for the original payment.
    Aspsp:
      type: object
      properties:
        aspspUuid:
          type: string
          description: The UUID associated with the ASPSP / bank.
          example: "4ADFB67A-0F5B-4A9A-9D74-34437250045C"
        alias:
          type: string
          example: Demo Bank
          description: The name of the ASPSP / bank.
        logoUrl:
          type: string
          example: "https://assets.fire.com/pisp/demo.svg"
          description: A link to the ASPSP / bank's logo in SVG format.
        country:
          $ref: '#/components/schemas/Country'
        currency:
          $ref: '#/components/schemas/Currency'
        dateCreated:
          type: string
          format: date-time
          example: "2019-08-22T07:48:56.460Z"
          description: The date the ASPSP / bank was created.
        lastUpdated:
          type: string
          format: date-time
          example: "2019-08-22T07:48:56.460Z"
          description: The date the ASPSP / bank was last updated.
    NewApiApplication:
      type: object
      properties:
        ican:
          type: integer
          format: int64
          description: The ICAN of one of your Fire accounts. Restrict this API Application to a certan account.
        enabled:
          type: boolean
          example: true
          description: Whether or not this API Application can be used
        expiry:
          type: string
          format: date-time
          example: "2019-08-22T07:48:56.460Z"
          description: The date that this API Application can no longer be used.
        applicationName:
          type: string
          description: A name for the API Application to help you identify it
          example: Batch Processing API
        numberOfPaymentApprovalsRequired:
          type: integer
          description: Number of approvals required to process a payment in a batch
          example: 1
        numberOfPayeeApprovalsRequired:
          type: integer
          description: Number of approvals required to create a payee in a batch
          example: 1
        permissions:
          type: array
          items:
            type: string
          description: The list of permissions required
          example: [ "PERM_BUSINESS_POST_PAYMENT_REQUEST","PERM_BUSINESS_GET_ASPSPS" ]
    ApiApplication:
      type: object
      properties:
        applicationId:
          type: integer
          format: int64
          description: The ID of the API Application
          example: 45345
        ican:
          type: integer
          format: int64
          description: The ICAN of one of your Fire accounts. Restrict this API Application to a certan account.
        enabled:
          type: boolean
          example: true
          description: Whether or not this API Application can be used
        expiry:
          type: string
          format: date-time
          example: "2019-08-22T07:48:56.460Z"
          description: The date that this API Application can no longer be used.
        numberOfPaymentApprovalsRequired:
          type: integer
          description: Number of approvals required to process a payment in a batch
          example: 1
        numberOfPayeeApprovalsRequired:
          type: integer
          description: Number of approvals required to create a payee in a batch
          example: 1
        clientId:
          type: string
          description: The Client ID of the new API Application
          example: "4ADFB67A-0F5B-4A9A-9D74-34437250045C"
        clientKey:
          type: string
          description: The Client Key of the new API Application
          example: "4ADFB67A-0F5B-4A9A-9D74-34437250045C"
        refreshToken:
          type: string
          description: The Refresh Token of the new API Application
          example: "4ADFB67A-0F5B-4A9A-9D74-34437250045C"
    User:
      type: object
      properties:
        Id:
          type: integer
          format: int64
          description: The User ID for this User
          example: "14059"
        emailAddress:
          type: string
          description: email address for user
          example: "colmreid@gmail.com"
        firstName: 
          type: string
          description: User first name
          example: "Colm"
        lastName:
          type: string
          description: User second name
          example: "Reid"
        mobileNumber: 
          type: integer
          format: int64
          description: User mobile number
          example: "+353830386344"
        role: 
          type: string
          description: User role
          enum: 
          - "ADMIN"
          - "FULL_USER"
          - "READ_ONLY"
          - "CARD_ONLY"
        status:
          type: string
          description: Status of user
          enum: 
          - "LIVE"
          - "CLOSED"
          - "FROZEN"
          - "INVITE_SENT"
          - "SMS_CODE_SENT"
        lastlogin:
          type: string
          description: Timestamp on when user last logged in.
          example: "2012-01-20T11:21:35.000Z"
        userCvl: 
          type: string
          description: Users Cvl type ID (shows up when status is LIVE)
          example: "FULL"
        mobileApplicationDetails: 
          type: object
          $ref: "#components/schemas/mobileApplicationDetails"
    mobileApplicationDetails: 
      type: object
      properties: 
        businessUserId: 
         type: integer
         format: int64
         description: Business user ID
         example: "14059"
        mobileApplicationId: 
         type: integer
         format: int64
         description: Mobile application id for user.
         example: "18967"
        clientID:
         type: string
         description: Client ID of user.
         example: "EBB10F29-A653-4DBA-9C8C-BA79F72F78B0"
        status:
         type: string
         description: Status of user
         enum: 
          - "LIVE"
          - "CLOSED"
          - "LOCKED"
          - "SMS_SENT"
        deviceName:
         type: string
         enum: 
         - "iPhone"
         - "Android"
         - "Other"
         description: type of device. 
        OS: 
         type: string
         enum: 
         - "Android"
         - "IOS" 
         - "OTHER"
         description: Operating system of device.
        deviceOSVersion:
         type: string 
         description: OS version for device.
         example: "14.4"
    PayeeBankAccount:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identifier for the fire.com payee bank account (assigned by fire.com).
          example: 742
        currency:
          type: object
          $ref: '#/components/schemas/Currency'
        status:
          type: string
          enum: 
          - CREATED 
          - LIVE 
          - CLOSED 
          - ARCHIVED
          description: >
            The status of the payee. Only payees in LIVE status can be selected as a destination account for an outgoing payment.
              * 'CREATED' - The payee has been set-up via Bank Transfer Received, Direct Debit, or Open Banking. This payee must be converted to LIVE status to select as a destination account for an outgoing payment.
              * 'LIVE' - The payee can be selected as a destination account for an outgoing payment.
              * 'CLOSED'
              * 'ARCHIVED' - The payee has been deleted and must be added again to be selected as a destination account for an outgoing payment.
          example: LIVE
        accountName:
          type: string
          description: The alias attributed to the payee, usually set by the user when creating the payee.
          example: Joe
        accountHolderName:
          type: string
          description: The name on the payee bank account.
          example: Joe Bloggs
        bic:
          type: string
          description: The BIC of the account if currency is EUR.
          example: BOFIIE2DXXX
        iban:
          type: string
          description: The IBAN of the account if currency is EUR.
          example: IE86BOFI90535211111111
        nsc: 
          type: string
          description: The Sort Code of the account if currency is GBP.
          example: null
        accountNumber:
          type: string
          description: The Account Number of the account if currency is GBP.
          example: null
        createdBy:
          type: string
          enum:
            - CUSTOMER
            - LODGEMENT
            - DIRECT DEBIT
            - OPEN BANKING
            - FIRE OPEN PAYMENT
            - FIRE DIRECT
          description: The creation source of the payee. 
          example: CUSTOMER
        dateCreated:
          type: string
          format: date-time
          example: "2019-08-22T07:48:56.460Z"
          description: The date the payee was created. Milliseconds since the epoch (1970).
    DirectDebitDetails:
      type: object
      properties:
        directDebitUuid:
          type: string
          description: The UUID for the direct debit payment
          example: 42de0705-e3f1-44fa-8c41-79973eb80eb2
        currency:
          type: object
          properties:
            code:
              type: string
              description: The three letter code for the currency - `GBP` only supported at this time.
              enum:
                - GBP
              example: GBP
            description:
              type: string
              description: The name of the currency
              example: Sterling
        status:
          type: string
          enum:
            - RECIEVED
            - REJECT_REQUESTED
            - REJECT_READY_FOR_PROCESSING
            - REJECT_RECORD_IN_PROGRESS 
            - REJECT_RECORDED 
            - REJECT_FILE_CREATED
            - REJECT_FILE_SENT 
            - COLLECTED
            - REFUND_REQUESTED
            - REFUND_RECORD_IN_PROGRESS
            - REFUND_RECORDED 
            - REFUND_FILE_CREATED 
            - REFUND_FILE_SENT
          description: >
            The statuses of the direct debit payments associated with the mandate.
            
            * 'RECIEVED' - Direct Debit has been recieved
            
            * 'REJECT_REQUESTED' - The direct debit has a rejected request associated with it
            
            * 'REJECT_READY_FOR_PROCESSING' 

            * 'REJECT_RECORD_IN_PROGRESS'

            * 'REJECT_RECORDED'

            * 'REJECT_FILE_CREATED'

            * 'REJECT_FILE_SENT'

            * 'COLLECTED' - Direct debit collected

            * 'REFUND_REQUESTED' - Refund requested on direct debit

            * 'REFUND_RECORD_IN_PROGRESS' - Refund in progress on direct debit

            * 'REFUND_RECORDED'

            * 'REFUND_FILE_CREATED'

            * 'REFUND_FILE_SENT' 
          example: RECIEVED
        type:  
          type: string
          enum: 
            - FIRST_COLLECTION
            - ONGOING_COLLECTION
            - REPRESENTED_COLLECTION
            - FINAL_COLLECTION
          description: The type of the direct debit.
          example: FIRST_COLLECTION
        mandateUUid:
          type: string
          description: The UUID for the mandate
          example: f171b143-e3eb-47de-85a6-1c1f1108c701
        originatorReference:
          type: string
          description: Set by party who sets up the direct debit.
          example: VODA-123456
        originatorName:
          type: string
          description: The creator of the party who sets up the direct debit.
          example: Vodafone PLC
        originatorAlias:
          type: string
          description: The Alias of the party who sets up the direct debit.
          example: Three          
        directDebitReference: 
          type: string
          description: The direct debit reference.
          example: VODA-ABC453-1
        targetIcan:
          type: integer
          format: int64
          description: The ican of your fire account that the money was taken from
          example: 42
        targetPayeeId:
          type: integer
          format: int64
          description: The payee that was created when the DD was processed
          example: 12
        isDDIC:
          type: boolean
          description: DDIC is a Direct Debit Indemnity Claim (i.e.a refund). If if the DD is requested to be refunded it is marked isDDIC true.
          example: false
        amount: 
          type: integer
          format: int64
          description: Value of the payment
          example: 100
        schemeRejectReason:
          type: string
          description: Reason why rejected
          example: eg. Instruction cancelled by payer
        schemeRejectReasonCode:
          type: string
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5 
            - 6
            - 7 
            - 8
            - 9
            - A
            - B 
          example: for BACS (ARUDD) 0|1|2|3|5|6|7|8|9|A|B
          description: The reject code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.
        lastUpdated:  
          type: string
          format: date-time
          description: Date the direct debit was last updated. Milliseconds since the epoch (1970).
          example: "2016-12-15T22:56:05.937Z"
        dateCreated:
          type: string
          format: date-time
          example: "2016-12-15T22:56:05.937Z"
          description: Date the direct debit was created. Milliseconds since the epoch (1970).
    DirectDebitPaymentsAssociatedWithMandate:
      type: object
      properties:
        total: 
          type: integer
          format: int64
          description: Number of direct debits found
          example: 1
        directdebits:
          type: array
          items:
            properties:
              directDebitUuid:
                type: string
                description: The UUID for the direct debit payment
                example: 42de0705-e3f1-44fa-8c41-79973eb80eb2
              currency:
                type: object
                properties:
                  code:
                    type: string
                    description: The three letter code for the currency - `GBP` only supported at this moment.
                    enum:
                      - GBP
                    example: GBP
                  description:
                    type: string
                    description: The name of the currency
                    example: Sterling
        status:
          type: string
          enum:
            - RECIEVED
            - REJECT_REQUESTED
            - REJECT_READY_FOR_PROCESSING
            - REJECT_RECORD_IN_PROGRESS 
            - REJECT_RECORDED 
            - REJECT_FILE_CREATED
            - REJECT_FILE_SENT 
            - COLLECTED
            - REFUND_REQUESTED
            - REFUND_RECORD_IN_PROGRESS
            - REFUND_RECORDED 
            - REFUND_FILE_CREATED 
            - REFUND_FILE_SENT
          description: > 
            The statuses of the direct debit payments associated with the mandate.
                      The statuses of the direct debit payments associated with the mandate.
            * 'RECIEVED' - Direct Debit has been recieved
            
            * 'REJECT_REQUESTED' - The direct debit has a rejected request associated with it
            
            * 'REJECT_READY_FOR_PROCESSING' 

            * 'REJECT_RECORD_IN_PROGRESS'

            * 'REJECT_RECORDED'

            * 'REJECT_FILE_CREATED'

            * 'REJECT_FILE_SENT'

            * 'COLLECTED' - Direct debit collected

            * 'REFUND_REQUESTED' - Refund requested on direct debit

            * 'REFUND_RECORD_IN_PROGRESS' - Refund in progress on direct debit

            * 'REFUND_RECORDED'

            * 'REFUND_FILE_CREATED'

            * 'REFUND_FILE_SENT'   
          example: RECIEVED
        type:  
          type: string
          enum: 
            - FIRST_COLLECTION
            - ONGOING_COLLECTION
            - REPRESENTED_COLLECTION
            - FINAL_COLLECTION
          description: The type of the direct debit.
          example: FIRST_COLLECTION
        mandateUUid:
          type: string
          description: The UUID for the mandate
          example: f171b143-e3eb-47de-85a6-1c1f1108c701
        originatorReference:
          type: string
          description: Set by party who sets up the direct debit.
          example: VODA-123456
        originatorName:
          type: string
          description: The creator of the party who sets up the direct debit.
          example: Vodafone PLC
        originatorAlias:
          type: string
          description: The alias of the party who sets up the direct debit.
          example: Vodafone PLC Alias
        originatorLogoUrlSmall:
          type: string
          description: Logo url from party who sets up the direct debit.
          example: originatorLogoSmall
        originatorLogoUrlLarge:
          type: string
          description: Logo url from party who sets up the direct debit.
          example: originatorLogoLarge        
        directDebitReference: 
          type: string
          description: The direct debit reference.
          example: VODA-ABC453-1
        targetIcan:
          type: integer
          format: int64
          description:  The ican of your fire account that the money was taken from
          example: 42
        targetPayeeId:
          type: integer
          format: int64
          description: The payee that was created when the DD was processed
          example: 12
        amount: 
          type: integer
          format: int64
          description: Value of the payment
          example: 100
        feeAmount: 
          type: integer
          format: int64
          description: The fee for the transaction
          example: 1
        taxAmount:
          type: integer
          format: int64
          description: The Tax for the transaction
          example: 2
        amountAfterCharges:
          type: integer
          format: int64
          description: The amount recived after charges apply
          example: 97
        fireRejectionReason:
          type: string
          enum:
            - ACCOUNT_NOT_FOUND 
            - ACCOUNT_NOT_LIVE 
            - ACCOUNT_DOES_NOT_ACCEPT_DIRECT_DEBITS 
            - INVALID_ACCOUNT_CURRENCY  
            - MANDATE_NOT_FOUND  
            - MANDATE_INVALID_STATUS 
            - BUSINESS_NOT_LIVE  
            - BUSINESS_NOT_FULL 
            - PERSONAL_USER_NOT_LIVE 
            - PERSONAL_USER_NOT_FULL 
            - INSUFFICIENT_FUNDS  
            - REQUESTED_BY_CUSTOMER_VIA_SUPPORT  
            - MANDATE_CANCELLED 
            - CUSTOMER_DECEASED 
            - ACCOUNT_TRANSFERRED 
            - ADVANCE_NOTICE_DISPUTED_REQUESTED_BY_CUSTOMER 
            - AMOUNT_DIFFERS_REQUESTED_BY_CUSTOMER 
            - AMOUNT_NOT_DUE_REQUESTED_BY_CUSTOMER 
            - PRESENTATION_OVERDUE_REQUESTED_BY_CUSTOMER 
            - ORIGINATOR_DIFFERS 
            - CUSTOMER_ACCOUNT_CLOSED 
            - REQUESTED_BY_CUSTOMER
          description: Rejection reason if transaction is rejected
          example: ACCOUNT_NOT_FOUND                       
        schemeRejectReason:
          type: string
          description: Reason why rejected
          example: eg. Instruction cancelled by payer
        schemeRejectReasonCode:
          type: string
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5 
            - 6
            - 7 
            - 8
            - 9
          example: for BACS (ARUDD) 0|1|2|3|5|6|7|8
          description: The reject code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.
        lastUpdated:  
          type: string
          format: date-time
          description: Date the direct debit was last updated. Milliseconds since the epoch (1970).
          example: "2016-12-15T22:56:05.937Z"
        dateCreated:
          type: string
          format: date-time
          example: "2016-12-15T22:56:05.937Z"
          description: Date the direct debit was created. Milliseconds since the epoch (1970).            
    DirectDebitMandateDetails:
      type: object
      properties:
        mandateUuid:
          type: string
          description: The UUID for the mandate
          example: 28d627c3-1889-44c8-ae59-6f6b20239260
        currency:
          type: object
          properties:
            code:
              type: string
              description: The three letter code for the currency - `GBP`only supported at this moment.
              enum:
                - GBP
              example: GBP
            description:
              type: string
              description: The name of the currency
              example: Sterling
        status:
          type: string
          enum:
            - RECIEVED
            - REJECT_REQUESTED
            - REJECT_READY_FOR_PROCESSING
            - REJECT_RECORD_IN_PROGRESS 
            - REJECT_RECORDED 
            - REJECT_FILE_CREATED
            - REJECT_FILE_SENT 
            - COLLECTED
            - REFUND_REQUESTED
            - REFUND_RECORD_IN_PROGRESS
            - REFUND_RECORDED 
            - REFUND_FILE_CREATED 
            - REFUND_FILE_SENT
          description: >
              The statuses of the direct debit payments associated with the mandate.

              * 'RECIEVED'

              * 'REJECT_REQUESTED'

              * 'REJECT_READY_FOR_PROCESSING'

              * 'REJECT_RECORD_IN_PROGRESS'

              * 'REJECT_RECORDED'

              * 'REJECT_FILE_CREATED'

              * 'REJECT_FILE_SENT'

              * 'COLLECTED'

              * 'REFUND_REQUESTED'

              * 'REFUND_RECORD_IN_PROGRESS'

              * 'REFUND_RECORDED'

              * 'REFUND_RECORD_IN_PROGRESS'

              * 'REFUND_RECORDED'

              * 'REFUND_FILE_CREATED'

              * 'REFUND_FILE_SENT'
          example: RECIEVED 
        originatorReference:
          type: string
          description: Set by party who sets up the direct debit.
          example: VODA-123456
        originatorName:
          type: string
          description: The creator of the party who sets up the direct debit.
          example: Vodafone PLC
        originatorAlias:
          type: string
          description: The alias of the party who sets up the direct debit.
          example: Vodafone PLC Alias          
        originatorLogoUrlSmall:
          type: string
          description: Logo url from party who sets up the direct debit.
          example: originatorLogoSmall
        originatorLogoUrlLarge:
          type: string
          description: Logo url from party who sets up the direct debit.
          example: originatorLogoLarge
        mandateRefernce:
          type: string
          example: CRZ-102190123
          description: the reference of the mandate  
        alias: 
          type: string
          example: Vodaphone
          description: The name of the alias
        targetIcan:
          type: integer
          format: int64
          example: 1
          description: Identifier for the fire.com account (assigned by fire.com)
        numberOfDirectDebitCollected:
          type: integer
          format: int64
          example: 2
          description: The number of direct debits collected
        valueOfDirectDebitCollected:
          type: integer
          format: int64
          example: 2
          description: The value of direct debits collected
        latestDirectDebitAmount:
          type: integer
          format: int64
          example: 2
          description: The value of largest direct debit collected  
        latestDirectDebitDate:
          type: string
          format: date-time
          example: "2016-12-15T22:56:05.937Z"
          description: The date of latest direct debit collected
        fireRejectionReason:
          type: string
          enum:
            - ACCOUNT_DOES_NOT_ACCEPT_DIRECT_DEBITS  
            - DDIC  
            - ACCOUNT_NOT_FOUND  
            - ACCOUNT_NOT_LIVE   
            - CUSTOMER_NOT_FOUND   
            - BUSINESS_NOT_LIVE  
            - BUSINESS_NOT_FULL 
            - PERSONAL_USER_NOT_LIVE 
            - PERSONAL_USER_NOT_FULL
            - MANDATE_ALREADY_EXISTS 
            - MANDATE_WITH_DIFERENT_ACCOUNT 
            - NULL_MANDATE_REFERENCE 
            - INVALID_ACCOUNT_CURRENCY 
            - INVALID_MANDATE_REFERENCE 
            - REQUESTED_BY_CUSTOMER_VIA_SUPPORT 
            - CUSTOMER_ACCOUNT_CLOSED 
            - CUSTOMER_DECEASED 
            - ACCOUNT_TRANSFERRED 
            - MANDATE_NOT_FOUND 
            - ACCOUNT_TRANSFERRED_TO_DIFFERENT_ACCOUNT 
            - INVALID_ACCOUNT_TYPE 
            - MANDATE_EXPIRED 
            - MANDATE_CANCELLED 
            - REQUESTED_BY_CUSTOMER 
          description: Rejection reason if transaction is rejected
          example: ACCOUNT_DOES_NOT_ACCEPT_DIRECT_DEBITS                       
        schemeRejectReason:
          type: string
          description: Reason why rejected
          example: eg. Instruction cancelled by payer
        schemeRejectReasonCode:
          type: string
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5 
            - 6
            - B 
            - C
            - F
            - G
            - H 
            - O
            - K
          example: for BACS (ARUDD) 0|1|2|3|5|6|B|C|F|G|H|O|K
          description: The reject code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.          
        fireCancelReason: 
          type: string
          enum:
            - REFRER_TO_CUSTOMER 
            - REQUESTED_BY_CUSTOMER_VIA_SUPPORT 
            - CUSTOMER_DECEASED 
            - CUSTOMER_ACCOUNT_CLOSED 
            - ADVANCE_NOTICE_DISPUTED_VIA_SUPPORT 
            - ACCOUNT_TRANSFERRED 
            - ACCOUNT_TRANSFERRED_TO_DIFFERENT_ACCOUNT 
            - MANDATE_AMENDED 
            - MANDATE_REINSTATED 
            - REQUESTED_BY_CUSTOMER
          description: Reason why canceled 
          example: REFRER_TO_CUSTOMER
        schemeCancelReason:
          type: string
          description: Reason for cancelation
          example: e.g. Instruction cancelled by payer 
        schemeCancelReasonCode:
          type: string
          example: For BACS (ADDACS) - 0|1|2|3|B|C|D|E|R
          description: The cancelation code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.          
        lastUpdated:  
          type: string
          format: date-time
          description: Date the direct debit was last updated. Milliseconds since the epoch (1970).
          example: "2016-12-15T22:56:05.937Z"
        dateCreated:
          type: string
          format: date-time
          example: "2016-12-15T22:56:05.937Z"
          description: Date the direct debit was created. Milliseconds since the epoch (1970).
        dateRejected:  
          type: string
          format: date-time
          description: Date the direct debit was rejected. Milliseconds since the epoch (1970).
          example: "2016-12-15T22:56:05.937Z"
        dateCompleted:
          type: string
          format: date-time
          example: "2016-12-15T22:56:05.937Z"
          description: Date the direct debit was completed. Milliseconds since the epoch (1970).
        dateCancelled:
          type: string
          format: date-time
          example: "2016-12-15T22:56:05.937Z"
          description: Date the direct debit was canceled. Milliseconds since the epoch (1970).   
    DirectDebitMandates:
      type: object
      properties:
        total: 
          type: integer
          format: int64
          description: Number of direct debits found
          example: 1
        mandates:
          type: array
          items:
            properties:
              mandateUuid:
                type: string
                description: The UUID for the  mandate
                example: 28d627c3-1889-44c8-ae59-6f6b20239260
              Currency:
                type: object
                properties:
                  code:
                    type: string
                    description: The three letter code for the currency -`GBP` only supported at this moment.
                    enum:
                      - GBP
                    example: GBP
                  description:
                    type: string
                    description: The name of the currency
                    example: Sterling
        status:
          type: string
          enum:
            - CREATED
            - LIVE
            - REJECT_REQUESTED 
            - REJECT_RECORD_IN_PROGRESS 
            - REJECT_RECORDED 
            - REJECT_FILE_CREATED
            - REJECT_FILE_SENT 
            - CANCEL_REQUESTED 
            - CANCEL_RECORD_IN_PROGRESS 
            - CANCEL_RECORDED 
            - CANCEL_FILE_CREATED  
            - CANCEL_FILE_SENT  
            - COMPLETE 
            - DORMANT
          description: > 
              The status of the mandate.

              * 'CREATED'

              * 'LIVE'

              * 'REJECT_REQUESTED'

              * 'REJECT_RECORD_IN_PROGRESS'

              * 'REJECT_RECORDED'

              * 'REJECT_FILE_CREATED'

              * 'REJECT_FILE_SENT'

              * 'CANCEL_REQUESTED'

              * 'CANCEL_RECORD_IN_PROGRESS'

              * 'CANCEL_RECORDED'

              * 'CANCEL_FILE_CREATED'

              * 'CANCEL_FILE_SENT'

              * 'COMPLETE'

              * 'DORMANT'
          example: RECIEVED
        originatorReference:
          type: string
          description: Set by party who sets up the direct debit.
          example: VODA-123456
        originatorName:
          type: string
          description: The creator of the party who sets up the direct debit.
          example: Vodafone PLC
        originatorAlias: 
          type: string
          example: Vodaphone PLC
          description: The name of the alias
        originatorLogoUrlSmall:
          type: string
          description: Logo url from party who sets up the direct debit.
          example: originatorLogoSmall
        originatorLogoUrlLarge:
          type: string
          description: Logo url from party who sets up the direct debit.
          example: originatorLogoLarge
        mandateRefernce:
          type: string
          example: CRZ-102190123
          description: the reference of the mandate
        alias: 
          type: string
          example: Vodaphone
          description: The name of the alias          
        targetIcan:
          type: integer
          format: int64
          example: 1
          description: Identifier for the fire.com account (assigned by fire.com)
        numberOfDirectDebitCollected:
          type: integer
          format: int64
          example: 2
          description: The number of direct debits collected
        valueOfDirectDebitCollected:
          type: integer
          format: int64
          example: 2
          description: The value of direct debits collected
        latestDirectDebitAmount:
          type: integer
          format: int64
          example: 2
          description: The value of largest direct debit collected  
        latestDirectDebitDate:
          type: string
          format: date-time
          example: "2016-12-15T22:56:05.937Z"
          description: The date of latest direct debit collected
        fireRejectionReason:
          type: string
          enum:
            - ACCOUNT_DOES_NOT_ACCEPT_DIRECT_DEBITS  
            - DDIC  
            - ACCOUNT_NOT_FOUND  
            - ACCOUNT_NOT_LIVE   
            - CUSTOMER_NOT_FOUND   
            - BUSINESS_NOT_LIVE  
            - BUSINESS_NOT_FULL 
            - PERSONAL_USER_NOT_LIVE 
            - PERSONAL_USER_NOT_FULL
            - MANDATE_ALREADY_EXISTS 
            - MANDATE_WITH_DIFERENT_ACCOUNT 
            - NULL_MANDATE_REFERENCE 
            - INVALID_ACCOUNT_CURRENCY 
            - INVALID_MANDATE_REFERENCE 
            - REQUESTED_BY_CUSTOMER_VIA_SUPPORT 
            - CUSTOMER_ACCOUNT_CLOSED 
            - CUSTOMER_DECEASED 
            - ACCOUNT_TRANSFERRED 
            - MANDATE_NOT_FOUND 
            - ACCOUNT_TRANSFERRED_TO_DIFFERENT_ACCOUNT 
            - INVALID_ACCOUNT_TYPE 
            - MANDATE_EXPIRED 
            - MANDATE_CANCELLED 
            - REQUESTED_BY_CUSTOMER 
          description: Rejection reason if transaction is rejected
          example: ACCOUNT_DOES_NOT_ACCEPT_DIRECT_DEBITS           
        schemeCancelReason:
          type: string
          description: Reason for cancelation
          example: e.g. Instruction cancelled by payer 
        schemeCancelReasonCode:
          type: string
          example: For BACS (ADDACS) - 0|1|2|3|B|C|D|E|R
          description: The cancelation code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.
        lastUpdated:  
          type: string
          format: date-time
          description: Date the direct debit was last updated. Milliseconds since the epoch (1970).
          example: "2016-12-15T22:56:05.937Z"
        dateCreated:
          type: string
          format: date-time
          example: "2016-12-15T22:56:05.937Z"
          description: Date the direct debit was created. Milliseconds since the epoch (1970).
        dateCompleted:
          type: string
          format: date-time
          example: "2016-12-15T22:56:05.937Z"
          description: Date the direct debit was completed. Milliseconds since the epoch (1970).
        dateCancelled:
          type: string
          format: date-time
          example: "2016-12-15T22:56:05.937Z"
          description: Date the direct debit was canceled. Milliseconds since the epoch (1970).          
    CreateBatchRequest:
      type: object
      properties:
        type: 
          type: string
          enum:
            - BANK_TRANSFER
            - INTERNAL_TRANSFER
            - NEW_PAYEE
          description: The type of the batch - can be one of the listed 3
        currency:
          type: string
          example: EUR
          description: GBP or EUR
        batchName:
          type: string
          example: January 2018 Payroll
          description: An optional name you give to the batch at creation time. 
        jobNumber:
          type: string
          example: 2022-01-PR
          description: An optional job number you can give to the batch to help link it to your own system.
        callBackUrl:
          type: string 
          example: https://my.webserver.com/cb/payroll
          description: An optional POST URL that all events for this batch will be sent to.
    CreateBatchRequestResponce:
      type: object
      properties:
        batchUuid:
          type: string
          example: F2AF3F2B-4406-4199-B249-B354F2CC6019
          description: A UUID for this item. Leave blank to let fire.com create it for you. Must be a UUID.
    AddInternalTransferBatchPayment:
      type: object
      properties:
        icanFrom:
          type: integer
          format: int64
          example: 2001
          description: The account ID for the fire.com account the funds are taken from
        icanTo:
          type: integer
          format: int64
          example: 3221
          description: The account ID for the fire.com account the funds are directed to
        amount:
          type: integer
          format: int64
          example: 10000
          description: amount of funds to be transfered
        ref:
          type: string
          example: Moving funds to Operating Account
          description: The reference on the transaction
    AddInternalTransferBatchResponce:
      type: object
      properties:
        batchItemUuid:
          type: string
          example: fba4a76a-ce51-4fc1-b562-98ec01299e4d
          description: A Batch Item UUID for this item. Note* Do not confuse this for BatchUuid when submitting a batch. 
    addBatchMode1:
      type: object
      properties:
        icanFrom:
          type: integer
          format: int64
          example: 2001
          description: The Fire account ID for the fire.com account the funds are taken from.
        payeeId:
          type: integer
          format: int64
          example: 15002
          description: The ID of the existing or automatically created payee
        payeeType: 
          type: string
          enum:
          - PAYEE_ID 
          - ACCOUNT_DETAILS
          example: PAYEE_ID
          description: Use PAYEE_ID if you are paying existing approved payees (Mode 1). Specify the payee ID in the payeeId field. Use ACCOUNT_DETAILS if you are providing account numbers/sort codes/IBANs (Mode 2). Specify the account details in the destIban, destAccountHolderName, destNsc or destAccountNumber fields as appropriate.
        amount:
          type: integer
          format: int64
          example: 500
          description: The value of the transaction
        myRef:
          type: string
          example: Payment to John Smith for Consultancy in device.
          description: The reference on the transaction for your records - not shown to the beneficiary.
        yourRef:
          type: string
          example: ACME LTD - INV 23434
          description: The reference on the transaction - displayed on the beneficiary bank statement.
    addBatchMode2EUR:
      type: object
      properties:
        icanFrom:
          type: integer
          format: int64
          example: 2001
          description: The Fire account ID for the fire.com account the funds are taken from.
        payeeType: 
          type: string
          enum:
          - PAYEE_ID 
          - ACCOUNT_DETAILS
          example: ACCOUNT_DETAILS
          description: Use PAYEE_ID if you are paying existing approved payees (Mode 1). Specify the payee ID in the payeeId field. Use ACCOUNT_DETAILS if you are providing account numbers/sort codes/IBANs (Mode 2). Specify the account details in the destIban, destAccountHolderName, destNsc or destAccountNumber fields as appropriate.
        destIban:
          type: string
          example: IE00AIBK93123412341234
          description: The destination IBAN if a Euro Bank transfer
        destAccountHolderName:
          type: string
          example: John Smith
          description: The destination account holder name 
        amount:
          type: integer
          format: int64
          example: 500
          description: The value of the transaction
        myRef:
          type: string
          example: Payment to John Smith for Consultancy in device.
          description: The reference on the transaction for your records - not shown to the beneficiary.
        yourRef:
          type: string
          example: ACME LTD - INV 23434
          description: The reference on the transaction - displayed on the beneficiary bank statement.    
    addBatchMode2GBP:
      type: object
      properties:
        icanFrom:
          type: integer
          format: int64
          example: 2001
          description: The Fire account ID for the fire.com account the funds are taken from.
        payeeType: 
          type: string
          enum:
          - PAYEE_ID 
          - ACCOUNT_DETAILS
          example: ACCOUNT_DETAILS
          description: Use PAYEE_ID if you are paying existing approved payees (Mode 1). Specify the payee ID in the payeeId field. Use ACCOUNT_DETAILS if you are providing account numbers/sort codes/IBANs (Mode 2). Specify the account details in the destIban, destAccountHolderName, destNsc or destAccountNumber fields as appropriate.
        destNsc:
          type: integer
          format: int64
          example: 123456
          description: The destination Nsc if a GBP bank transfer
        destAccountNumber:
          type: integer
          format: int64
          example: 567890
          description: The destination Account Number if a GBP bank transfer
        destAccountHolderName:
          type: string
          example: John Smith
          description: The destination account holder name 
        amount:
          type: integer
          format: int64
          example: 500
          description: The value of the transaction
        myRef:
          type: string
          example: Payment to John Smith for Consultancy in device.
          description: The reference on the transaction for your records - not shown to the beneficiary.
        yourRef:
          type: string
          example: ACME LTD - INV 23434
          description: The reference on the transaction - displayed on the beneficiary bank statement. 
    listBatches:
      type: object
      properties:
        total: 
          type: integer
          format: int64
          example: 1
          description: total number of batches returned
        batchRequests:
          type: array
          items:
             $ref: '#/components/schemas/ListSingleBatch'
    ListSingleBatch:
      type: object
      properties:
        batchUuid: 
          type: string
          example: F2AF3F2B-4406-4199-B249-B354F2CC6019
          description: A UUID for this item.
        type: 
          type: string
          enum: 
          - INTERNAL_TRANSFER
          - BANK_TRANSFER
          - NEW_PAYEE
          description: The type of the batch - can be one of the listed 3              
        status:
          type: string
          enum:
            - PENDING_APPROVAL
            - REJECTED
            - COMPLETE
            - OPEN
            - CANCELLED
            - PENDING_PARENT_BATCH_APPROVAL
            - READY_FOR_PROCESSING
            - PROCESSING
          example: COMPLETE
          description: status of the batch object      
        sourceName: 
          type: string
          description: A string describing where the batch originated - for instance the name of the API token that was used, or showing that the batch was automatically created by fire.com (in the case of a new payee batch).
          example: Payment API
        batchName: 
          type: string
          example: January 2018 Payroll
          description: An optional name you give to the batch at creation time
        jobNumber:
          type: string
          example: 2018-01-PR
          description: An optional job number you can give to the batch to help link it to your own system.
        callBackUrl:
          type: string
          example: https://my.webserver.com/cb/payroll
          description: An optional POST URL that all events for this batch will be sent to.
        currency:
          type: string
          description: All payments in the batch must be the same currency - either EUR or GBP
          example: EUR
        numberOfItemsSubmitted:
          type: integer
          format: int64
          description: A count of the number of items in the batch
          example: 1  
        valueOfItemsSubmitted:
          type: integer
          format: int64
          description: A sum of the value of items in the batch. Specified in pence or cent.
          example: 10000
        numberOfItemsFailed:
          type: integer
          format: int64
          description: Once processed, a count of the number of items that didn’t process successfully.
          example: 0   
        valueOfItemsFailed:
          type: integer
          format: int64
          description: Once processed, a sum of the value of items that didn’t process successfully. Specified in pence or cent.
          example: 0    
        numberOfItemsSucceeded:
          type: integer
          format: int64
          description: Once processed, a count of the number of items that processed successfully.
          example: 1   
        valueOfItemsSucceeded:
          type: integer
          format: int64
          description: Once processed, a sum of the value of items that processed successfully. Specified in pence or cent.
          example: 10000               
        lastUpdated:
          type: string
          format: date-time
          example: "2021-04-04T10:48:53.540Z"
          description: The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
        dateCreated:
          type: string
          format: date-time
          example: "2021-04-04T10:48:53.540Z"
          description: The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z
    listItemBatch:
      type: object
      properties:
        total: 
          type: integer
          format: int64
          example: 1
          description: total number of batches returned
        items:
          type: array
          items:
            type: object
            properties:
              batchUuid: 
                type: string
                example: F2AF3F2B-4406-4199-B249-B354F2CC6019
                description: A UUID for this item.            
              status:
                type: string
                enum:
                - SUBMITTED
                - REMOVED
                - SUCCEEDED
                - FAILED
                example: SUCCEEDED
                description: status of the batch if internal trasnfer   
              result:
                type: object
                description: The outcome of the attempted transaction.
                properties:
                  code:
                    type: integer
                    format: int64
                    example: 500001
                  message:
                    type: string
                    example: SUCCESS    
              dateCreated:
                type: string
                format: date-time
                example: "2021-04-04T10:48:53.540Z"
                description: The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z              
              lastUpdated:
                type: string
                format: date-time
                example: "2021-04-04T10:48:53.540Z"
                description: The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
              feeAmount:
                type: integer 
                format: int64
                example: 0
                description: The fee charged by fire.com for the payment. In pence or cent.
              taxAmount:
                type: integer
                format: int64
                example: 0
                description: Any taxes/duty collected by fire.com for this payments (e.g. stamp duty etc). In pence or cent.
              amountAfterCharges:
                type: integer
                format: int64
                example: 10000
                description: The amount of the transfer after fees and taxes. in pence or cent.
              icanFrom:
                type: integer
                format: int64
                example: 2150
                description: The Fire account ID of the source account.
              icanTo:
                type: integer
                format: int64
                example: 1002
                description: The Fire account ID for the fire.com account the funds are sent to.
              amount:
                type: integer
                format: int64
                example: 10000
                description: The amount of funds to send. In cent or pence
              ref:
                type: string
                example: Testing a transfer via batch
                description: The reference on the transaction.
              refId:
                type: integer
                format: int64
                example: 123782
                description: The ID of the resulting payment in your account. Can be used to retrieve the transaction using the https://api.fire.com/business/v1/accounts/{accountId}/transactions/{refId} endpoint.
    ApproversForBatch:
      type: object
      properties:
        approvals:
          type: array
          items:
            type: object
            properties:
              userId:
                type: integer
                format: int64
                example: 3138
                description: User id assigned by fire.com
              emailAddress: 
                type: string
                example: jane.doe@example.com
                description: User email address
              firstName: 
                type: string
                example: Jane
              lastName:
                type: string
                example: Doe
              mobileNumber:
                type: string
                example: +353871234567
              status: 
                type: string
                example: PENDING_APPROVAL
              lastUpdated:
                type: string
                format: date-time
                example: "2021-04-04T10:48:53.540Z"
                description: The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
    
    APIErrors:
      type: object
      properties:
          errors:
            type: array
            items:
              $ref: '#/components/schemas/APIError'
    APIError:
      type: object
      properties:
        code:
          type: integer
          format: int64
          description: Error Code
          example: 50051
        message:
          type: string
          description: The error message
          example: Sorry, we are unable to proceed with your request.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: API Access Token
  responses:
    UnauthorisedError:
      description: Access Token is Invalid or missing
  parameters:
    orderParam:
      name: order
      in: query
      required: false
      description: Either `ASC` or `DESC`
      schema:
        enum:
            - ASC
            - DESC
    orderByParam:
      name: orderBy
      in: query
      required: false
      description: Currently defaults to `DATE` No other options at this time.
      schema:
        enum:
            - DATE
    limitParam:
      name: limit
      in: query
      required: false
      description: The number of records to return. Defaults to 10 - max is 200.
      schema:
        type: integer
        default: 10
        maximum: 200
    offsetParam:
      name: offset
      in: query
      required: false
      description: The page offset. Defaults to 0. This is the record number that the returned list will start at. E.g. `offset = 40` and `limit = 20` will return records 40 to 59.
      schema:
        type: integer
        default: 0
security:
  - bearerAuth: []
tags:
  - name: Authentication
    description: >
      Access to the API is by Bearer Tokens. The process is somewhat similar to OAuth2.0, but with some changes to improve security.

      1. You must first log into the firework online application and create a new Application in the Profile > API page. (You will need your PIN digits and 2-Factor Authentication device).
      
      2. Give your application a Name and select the scope/permissions you need the application to have (more on Scopes below).
      
      3. You will be provided with three pieces of information - the App Refresh Token, Client ID and Client Key. You need to take note of the Client Key when it is displayed - it will not be shown again.
      
      
      You now use these pieces of data to retrieve a short-term Access Token which you can use to access the API. The Access Token expires within a relatively short time, so even if it is compromised, the attacker will not have long to use it. The Client Key is the most important piece of information to keep secret. This should only ever be stored on a backend server, and never in a front end client or mobile app.


      **If you ever accidentally reveal the Client Key (or accidentally commit it to Github for instance) it is vital that you log into firework online and delete/recreate the App Tokens as soon as possible. Anyone who has these three pieces of data can access the API to view your data and set up payments from your account (depending on the scope of the tokens).**
      
      
      Once you have the access token, pass it as a header for every call, like so:

      `Authorization: Bearer $ACCESS_TOKEN`

      Whenever it expires, create a new nonce and get a new access token again.
  - name: fire.com Accounts
    description: fire.com Accounts are the equivalent of a bank account from bank.
  - name: Open Banking
    description: >
      Fire Open Payments is a feature of the fire.com business account that leverages Open Banking to allow your customers to pay you via bank transfer and to reconcile those payments as they are received into your fire.com GBP or EUR account.


      To set up each Fire Open Payment you first need to create a payment request. This contains the details of the payment such as the amount, destination account, description as well as various other specific fields that you want to associate with the payment. The payment request is represented as a URL with a unique code which can then be incorporated into an eCommerce shopping cart as an alternative form of payment. For example, you can put “Pay by Bank” on your website along with “Pay by Card” and “Pay by PayPal”. It can also be distributed by a variety of means such as by email, SMS, WhatsApp, encoded as a QR code, NFC tag, etc.


      Consumers confirm the payment details such as the amount are correct, select their bank and authorise the payment. Payments can be made from all major UK banks.


      The funds are settled into your fire.com account, fully reconciled, with your specified fields provided.


      There are two implementation options you can use to display payment pages with Fire Open Payments.

      1. **Hosted Payment Pages:** fire.com hosts the payment pages - this option allows you to re-direct your customer to the hosted fire.com payment pages displaying the payment details confirmation, bank selection, consent and response pages.

      2. **Integrated Payment Pages:** You host the payments page yourself - this option allows you to have control of the UI and UX for displaying the payment details confirmation, bank selection and response pages. Once the response is received, fire.com can re-direct the payer back to your website.


      ## Hosted Payment Pages Option

      ![Image](https://fire.com/docs/images/fop-hosted-flow.png)


      The payer is brought through 5 stages to complete the payment:

      1. **View Payment Details page:** The payer must first be clear on the amount of the payment, who they are paying and the reason for the payment.

      2. **Select Bank / Account Provider page:** The payer then selects their bank. Again this step is offered as part of the fire.com payment UI.

      3. **Consent page:**  The payer must provide consent to the PISP (fire.com) prior to authorising the payment. This is a regulatory requirement, this page must be hosted by fire.com.

      4. **Authenticate and Authorise Payment:** The payer will be redirected to their bank’s online site or mobile banking app. After authenticating, the details of the payment will be displayed, and the payer will authorise the payment.

      5. **Response page:** It is a regulatory requirement that the PISP (fire.com) display the results of the payment and provide the same information that would be provided if the payer had made the payment via their banking application. fire.com must display this page, before optionally redirecting the payer back to your website.


      To implement the hosted Fire Open Payments option you need to do the following:

      1. You can create a new Fire Open Payment request either within Firework Online or via the API.

      2. Create your new API application with the appropriate permissions required in Firework Online, as outlined in the “Authentication” steps. The permissions needed are:
          - “Create a Payment Request”
          - “Get Payment Details”

      3. Use the Refresh Token, Client ID and Client Key to create an access token as outlined in the “Authentication” steps.

      4. On your website, create a “Pay by Bank” button alongside your other available payment methods, such as Cards and PayPal.

      5. After the user clicks on “Pay by Bank”, you need to create a new Fire Open Payment request as outlined in the “Create a Fire Open Payment” steps. The Create a Fire Open Payment request endpoint returns a unique code for the payment request.

      6. Create a URL using the code returned in this format: `https://payments.fire.com/{code}` and redirect your customer to this page.

      7. fire.com will host all the pages that the customer needs to review and authorise the payment. fire.com will will return the paymentUUID of the successful or failed transaction to the returnUrl that you supplied when creating the Fire Open Payment request. fire.com can also optionally send a “webhook” to your website notifying you of the transaction’s outcome.

      8. Once fire.com responds with the paymentUUID and/or the webhook to your website, you need to call the “Get Payment Details” endpoint to get the details of the transaction. This will let you know whether the transaction was successful or not. You can set up the “Payment Request Payment Authorised” webhook to notify you once the payment is authorised or cancelled.

      9. The funds will be received into your GBP or EUR account. Funding will typically be within 6 business hours.


      Once the code is returned the payment can be viewed and paid by going to the following URL: `https://payments.fire.com/{code}`
  - name: API
    description: Manage your API Applications and Webhooks
  - name: Transactions
    description: While there are many types of transactions, they are all represented by the same JSON object with a different txnType.
  - name: Direct Debits
    description: > 
      The fire.com api allows businesses to automate direct debit payment actions on their fire.com business accounts.


      You can retrieve details of your direct debit payments, direct debit mandates and also take actions on both your direct debit payments and mandates.
  - name: Payment Batches
    description: >
      The fire.com API allows businesses to automate payments between their accounts or to third parties across the UK and Europe.


      For added security, the API can only set up the payments in batches. These batches must be approved by an authorised user via the firework mobile app.



      The process is as follows:


      **1.**Create a new batch
      
      
      **2.**Add payments to the batch
      
      
      **3.**Submit the batch for approval


      Once the batch is submitted, the authorised users will receive notifications to their firework mobile apps. They can review the contents of the batch and then approve or reject it. If approved, the batch is then processed. You can avail of enhanced security by using Dual Authorisation to verify payments if you wish. Dual Authorisation can be enabled by you when setting up your API application in firework online.


      **Batch Life Cycle Events**


      A batch webhook can be specified to receive details of all the payments as they are processed. This webhook receives notifications for every event in the batch lifecycle.


      The following events are triggered during a batch:


      **batch.opened:** Contains the details of the batch opened. Checks that the callback URL exists - unless a HTTP 200 response is returned, the callback URL will not be configured.


      **batch.item-added:** Details of the item added to the batch


      **batch.item-removed:** Details of the item removed from the batch


      **batch.cancelled:** Notifies that the batch was cancelled.


      **batch.submitted:** Notifes that the batch was submitted


      **batch.approved:** Notifies that the batch was approved.


      **batch.rejected:** Notifies that the batch was rejected.


      **batch.failed:** Notifies that the batch failed - includes the details of the failure (insufficient funds etc)


      **batch.completed:** Notifies that the batch completed successfully. Includes a summary.


      Push notifications are sent to the firework mobile app for many of these events too - these can be configured from within the app.



